{
    "collab_server" : "",
    "contents" : "library(tree)\nlibrary(boot)\n\nset.seed(12345)\ndata = read.csv(\"State.csv\", header = TRUE, \n                sep = \";\", dec = \",\", fill = TRUE)\n\n# sort data by variable MET (desc)\ndata.ordered = data[order(data$MET),]\n\n# plot EX vs MET\nplot(data.ordered$MET, data.ordered$EX)\n# fit a tree model, #observations in leaf >= 8\nmodel = tree(formula = EX ~ MET,\n             data = data.ordered,\n             control = tree.control(nrow(data.ordered), minsize = 8))\n# perform cross-validation on model\nmodel.cv = cv.tree(model)\nplot(model.cv, type=\"p\")\n# select optimal number of leaves\nbest.size = model.cv$size[which(model.cv$dev==min(model.cv$dev))]\n# prune tree using selected num of leaves from CV\nmodel.optimal = prune.tree(model, best = best.size)\n# report the selected tree\nsummary(model.optimal)\n\n#*****\n# TODO: plot original and fitted data..\n#*****\n# like this?\nfitted_data = predict(model.optimal, newdata = data.ordered)\nplot(data.ordered$MET, data.ordered$EX, col = \"green\")\npoints(data.ordered$MET, fitted_data, col = \"red\")\n\n# histogram of residuals\nhist(resid(model.optimal))\n\n# function that produces the statistics for the nonparametric bootstrap function boot()\nnonparametric=function(data, index)\n{\n  sample = data[index, ]\n  model = tree(formula = EX ~ MET,\n               data = sample,\n               control = tree.control(nrow(sample), minsize = 8))\n  model.pruned = prune.tree(model, best = best.size)\n  prediction = predict(model.pruned, newdata = data.ordered)\n  return (prediction)\n}\n\n# same for parametric boostrapping\nparametric=function(data)\n{\n  model = tree(formula = EX ~ MET,\n               data = data,\n               control = tree.control(nrow(data), minsize = 8))\n  model.pruned = prune.tree(model, best = best.size)\n  prediction = predict(model.pruned, newdata = data.ordered)\n  return (prediction)\n}\n\n# generate some new data for EX\nrng=function(data, mle)\n{\n  new_data = data.frame(EX = data$EX, MET = data$MET)\n  n = length(data$EX)\n  new_data$EX = rnorm(n, predict(mle, newdata = data), sd(resid(mle)))\n  return(new_data)\n}\n\nprediction=function(data)\n{\n  model = tree(formula = EX ~ MET,\n               data = data,\n               control = tree.control(nrow(data), minsize = 8))\n  model.pruned = prune.tree(model, best = best.size)\n  preds = predict(model.pruned, newdata = data.ordered)\n  n = length(data.ordered$EX)\n  preds_ = rnorm(n, preds, sd(resid(model.optimal)))\n  return (preds_)\n}\n\nboot.nonparam = boot(data = data.ordered,\n                     statistic = nonparametric,\n                     R = 1000)\nboot.nonparam.cb = envelope(boot.nonparam, level = 0.95)\n\n#plot(boot.nonparam)\n\n# plot MET vs EX, predictions and\n# confidence bands for model's predictions\nplot(data.ordered$MET, data.ordered$EX, col = \"black\", main = \"Confidence bands (non-parametric)\")\npoints(data.ordered$MET, fitted_data, col = \"red\")\nlines(data.ordered$MET, boot.nonparam.cb$point[1, ], col=\"blue\")\nlines(data.ordered$MET, boot.nonparam.cb$point[2, ], col=\"blue\")\nlegend(\"topright\", legend=c(\"Confidence bands\"),\n       col=c(\"blue\"), lty=1, cex=0.8)\n\nboot.param = boot(data = data.ordered,\n                  statistic = parametric,\n                  R = 1000,\n                  mle = model.optimal,\n                  ran.gen = rng,\n                  sim = \"parametric\")\n\nboot.param.preds = boot(data = data.ordered,\n                        statistic = prediction,\n                        R = 1000,\n                        mle = model.optimal,\n                        ran.gen = rng,\n                        sim = \"parametric\")\n\nboot.param.cb = envelope(boot.param, level = 0.95)\nboot.param.pb = envelope(boot.param.preds, level = 0.95)\n\n# same for parametric bootstrapping\nplot(boot.param)\nplot(data.ordered$MET, data.ordered$EX, col=\"black\", \n     main=\"Confidence and prediction bands (parametric)\", ylim=c(100, 500))\npoints(data.ordered$MET, fitted_data, col = \"red\")\nlines(data.ordered$MET, boot.param.cb$point[1, ], col=\"blue\")\nlines(data.ordered$MET, boot.param.cb$point[2, ], col=\"blue\")\nlines(data.ordered$MET, boot.param.pb$point[1, ], col=\"orange\")\nlines(data.ordered$MET, boot.param.pb$point[2, ], col=\"orange\")\nlegend(\"topright\", legend=c(\"Confidence bands\", \"Prediction bands\"),\n       col=c(\"blue\", \"orange\"), lty=1, cex=0.8)\n",
    "created" : 1511182323734.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1983371728",
    "id" : "FE0C3115",
    "lastKnownWriteTime" : 1511852986,
    "last_content_update" : 1511852986998,
    "path" : "~/TDDE01/lab2/assignment3/states.R",
    "project_path" : "states.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}